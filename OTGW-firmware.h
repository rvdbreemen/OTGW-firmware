/* 
***************************************************************************  
**  Program  : OTGW-firmware.h
**  Version  : v0.9.3
**
**  Copyright (c) 2021-2022 Robert van den Breemen
**
**  TERMS OF USE: MIT License. See bottom of file.                                                            
***************************************************************************      
*/

#include <Arduino.h>
//#include <ezTime.h>             // https://github.com/ropg/ezTime

#include <AceTime.h>
#include <TimeLib.h>

#include <TelnetStream.h>       // https://github.com/jandrassy/TelnetStream/commit/1294a9ee5cc9b1f7e51005091e351d60c8cddecf
#include <ArduinoJson.h>        // https://arduinojson.org/
#include "Wire.h"
#include "Debug.h"
#include "safeTimers.h"
#include "OTGWSerial.h"         // Bron Schelte's Serial class - it upgrades and more
#include "OTGW-Core.h"          // Core code for this firmware 
#include "LittleFS.h"

#define NO_GLOBAL_LITTLEFS  // prevent the LittleFS libary from creating a filesystem
#define sFS_PHYS_ADDR        0x200000 // FS_PHYS_ADDR   //use the external value generated by Arduino IDE in boards.txt. Consider hard coding at 0x200000
#define sFS_PHYS_PAGE        256// FS_PHYS_PAGE   //use the external value generated by Arduino IDE in boards.txt. Consider hard coding at 512
#define sFS_PHYS_BLOCK       4096 // ESP8266 flash uses 4k blocks. Anything other than 4k multiples gives an exception. Arduino IDE uses 8k
//#define sFS_PHYS_SIZE        1024 * 1024 //FS_PHYS_SIZE - OTGW_USER_FS_SIZE
#define sFS_PHYS_SIZE        1572864
#define sFS_MAX_OPEN_FILES   5 //FS_MAX_OPEN_FILES //hard coded since there is no external value generated by Arduino IDE in boards.txt

//#define uFS_PHYS_ADDR        0x37A000 // 0x3FA000 - uFS_PHYS_SIZE //0x3FA000 is provided by the ESP8266 arduino package in boards.txt -> nodemcuv2.menu.eesz.4M2M.build.spiffs_end
#define uFS_PHYS_ADDR        0x380000 // 0x3FA000 - uFS_PHYS_SIZE //0x3FA000 is provided by the ESP8266 arduino package in boards.txt -> nodemcuv2.menu.eesz.4M2M.build.spiffs_end
#define uFS_PHYS_SIZE        512 * 1024  - 0x6000
#define uFS_PHYS_PAGE        sFS_PHYS_PAGE 
#define uFS_PHYS_BLOCK       sFS_PHYS_BLOCK 
#define uFS_MAX_OPEN_FILES   sFS_MAX_OPEN_FILES

extern FS SystemFS;         // these FS are defined in OTGW-firmware.ino
extern FS UserFS;
bool bUserFSpresent = false;

//OTGW Nodoshop hardware definitions
#define I2CSCL D1
#define I2CSDA D2
#define BUTTON D3
#define PICRST D5

#define LED1 D4
#define LED2 D0

#define PICFIRMWARE "/gateway.hex"

OTGWSerial OTGWSerial(PICRST, LED2);
void fwupgradestart(const char *hexfile);

void blinkLEDnow();
void blinkLEDnow(uint8_t);
void setLed(int8_t, uint8_t);

//Defaults and macro definitions
#define _HOSTNAME       "OTGW"
#define SETTINGS_FILE   "/settings.ini"
#define NTP_DEFAULT_TIMEZONE "Europe/Amsterdam"
#define NTP_HOST_DEFAULT "pool.ntp.org"
#define NTP_RESYNC_TIME 1800 //seconds = every 30 minutes
#define HOME_ASSISTANT_DISCOVERY_PREFIX   "homeassistant"  // Home Assistant discovery prefix
#define CMSG_SIZE 512
#define JSON_BUFF_MAX   1024
#define CSTR(x) x.c_str()
#define CBOOLEAN(x) (x?"true":"false")
#define CONOFF(x) (x?"On":"Off")
#define CCONOFF(x) (x?"ON":"OFF")
#define CBINARY(x) (x?"1":"0")
#define EVALBOOLEAN(x) (strcasecmp(x,"true")==0||strcasecmp(x,"on")==0||strcasecmp(x,"1")==0)


//prototype
void sendMQTTData(const String, const String, const bool);
void sendMQTTData(const char*, const char*, const bool);
void addOTWGcmdtoqueue(const char* ,  int , const bool);

//Global variables
WiFiClient  wifiClient;
char        cMsg[CMSG_SIZE];
char        fChar[10];
String      lastReset = "";
uint32_t    upTimeSeconds = 0;
uint32_t    rebootCount = 0;
String      sMessage = "";    
uint32_t    MQTTautoConfigMap[8] = { 0 };

//Use acetime
using namespace ace_time;
static BasicZoneProcessor timeProcessor;
static const int CACHE_SIZE = 3;
// static BasicZoneManager<CACHE_SIZE> manager(zonedb::kZoneRegistrySize, zonedb::kZoneRegistry);
static BasicZoneProcessorCache<CACHE_SIZE> zoneProcessorCache;
static BasicZoneManager timezoneManager(zonedb::kZoneRegistrySize, zonedb::kZoneRegistry, zoneProcessorCache);

const char *weekDayName[]  {  "Unknown", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Unknown" };
const char *flashMode[]    { "QIO", "QOUT", "DIO", "DOUT", "Unknown" };

//Information on OTGW 
String    sPICfwversion = ""; 
String    errorupgrade = ""; 
bool      bOTGWonline = true;
bool      bOTGWboilerstate = false;
bool      bOTGWthermostatstate = false;
bool      bOTGWgatewaystate = false;
bool      bPrintSummarymode = false;  //default to PS=0 mode

//All things that are settings 
String    settingHostname = _HOSTNAME;

// GPIO Sensor Settings
bool      settingGPIOSENSORSenabled = false;
int8_t    settingGPIOSENSORSpin = 10;
int16_t   settingGPIOSENSORSinterval = 5;

//boot commands
bool      settingOTGWcommandenable = false;
String    settingOTGWcommands = "";

//debug flags 
bool      bDebugOTmsg = true;    
bool      bDebugRestAPI = false;
bool      bDebugMQTT = false;

//GPIO Output Settings
bool      settingMyDEBUG = false;
bool      settingGPIOOUTPUTSenabled = false;
int8_t    settingGPIOOUTPUTSpin = 16;
int8_t    settingGPIOOUTPUTStriggerBit = 0;

bool      settingNTPenable = true;
String    settingNTPtimezone = NTP_DEFAULT_TIMEZONE;
String    settingNTPhostname = NTP_HOST_DEFAULT;
bool      settingLEDblink = true;

//Now load network suff
#include "networkStuff.h"

//MQTT settings
bool      statusMQTTconnection = false; 
bool      settingMQTTenable = true;
bool      settingMQTTsecure = false; 
String    settingMQTTbroker= "192.168.88.254";
int16_t   settingMQTTbrokerPort = 1883; 
String    settingMQTTuser = "";
String    settingMQTTpasswd = "";
String    settingMQTThaprefix = HOME_ASSISTANT_DISCOVERY_PREFIX;
bool      settingMQTTharebootdetection = true;
String    settingMQTTtopTopic = "otgw";
String    settingMQTTuniqueid = getUniqueId(); // Intialization moved here from readsettings
bool      settingMQTTOTmessage = false;

// That's all folks...

/***************************************************************************
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the
* "Software"), to deal in the Software without restriction, including
* without limitation the rights to use, copy, modify, merge, publish,
* distribute, sublicense, and/or sell copies of the Software, and to permit
* persons to whom the Software is furnished to do so, subject to the
* following conditions:
*
* The above copyright notice and this permission notice shall be included
* in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
* OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
* THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* 
****************************************************************************
*/
